{
  "name": "OQL",
  "scopeName": "source.oql",
  "patterns": [
    {
      "include": "#solver"
    },
    {
      "include": "#sexp"
    },
    {
      "include": "#string"
    },
    {
      "include": "#keyfn"
    },
    {
      "include": "#number"
    },
    {
      "include": "#variable"
    },
    {
      "include": "#map"
    },
    {
      "include": "#array"
    }
  ],
  "repository": {
    "boolean": {
      "match": "(true|false)",
      "name": "constant.language.boolean.oql"
    },
    "datastore": {
      "match": "(?<=\\()\\w*(?=\\/)",
      "name": "storage.type.oql"
    },
    "keyfn": {
      "match": "(?<=\\()(\\=|datastore-record|return|get)",
      "name": "keyword.control.clojure"
    },
    "map": {
      "begin": "(\\{)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.map.begin.oql"
        }
      },
      "end": "(\\})",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.map.end.oql"
        }
      },
      "contentName": "map.content.oql",
      "patterns": [
        {
          "include": "#boolean"
        },
        {
          "include": "#string"
        },
        {
          "include": "$self"
        }
      ]
    },
    "number": {
      "match": "((?<=\\s|\\()\\d+(?=\\s|\\)))|(?<=\\s|\\()(\\d+\\.\\d+(?=\\s|\\)))",
      "name": "constant.numeric.double.oql"
    },
    "solver": {
      "begin": "(\\(:-)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.begin.oql"
        }
      },
      "end": "(?<!\\()",
      "endCaptures": {
        "1": {
          "name": "keyword.control.end.oql"
        }
      },
      "name": "keyword.control.oql",
      "patterns": [
        {
          "include": "#sexp"
        }
      ]
    },
    "array": {
      "begin": "(\\[)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.array.begin.oql"
        }
      },
      "end": "(\\])",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.array.end.oql"
        }
      },
      "name": "punctuation.section.array.oql",
      "patterns": [
        {
          "include": "#string"
        }
      ]
    },
    "sexp": {
      "begin": "(\\()",
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.expression.begin.oql"
        }
      },
      "end": "(\\))$|(\\)(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.expression.end.trailing.oql"
        },
        "2": {
          "name": "punctuation.section.expression.end.trailing.oql"
        },
        "3": {
          "name": "punctuation.section.expression.end.oql"
        }
      },
      "name": "meta.expression.oql",
      "patterns": [
        {
          "include": "#map"
        },
        {
          "include": "#keyfn"
        },
        {
          "include": "#datastore"
        },
        {
          "include": "#boolean"
        },
        {
          "include": "#string"
        },
        {
          "include": "#number"
        },
        {
          "include": "#variable"
        },
        {
          "include": "#self"
        }
      ]
    },
    "string": {
      "begin": "(?<!\\\\)(\")",
      "beginCaptures": {
        "1": {
          "name": "string.begin.oql"
        }
      },
      "end": "(\")",
      "endCaptures": {
        "1": {
          "name": "string.end.oql"
        }
      },
      "name": "string.quoted.double.oql",
      "patterns": [
        {
          "match": "\\\\.",
          "name": "constant.character.escape.oql"
        }
      ]
    },
    "variable": {
      "match": "(?<=\\s|\\()(\\w|-)+(?=\\s|\\))",
      "name": "meta.symbol.dynamic.oql"
    }
  }
}